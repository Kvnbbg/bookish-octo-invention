[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RECIPES_FILE",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "USERS_FILE",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "myapp",
        "description": "myapp",
        "isExtraImport": true,
        "detail": "myapp",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "myapp",
        "description": "myapp",
        "isExtraImport": true,
        "detail": "myapp",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "DB_HOST = \"actual_host\"\nDB_USER = \"actual_user\"\nDB_PASSWORD = \"actual_password\"\nDB_NAME = \"actual_db_name\"\nADDITIONAL_PARAM1 = \"actual_value1\"\nADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "DB_USER = \"actual_user\"\nDB_PASSWORD = \"actual_password\"\nDB_NAME = \"actual_db_name\"\nADDITIONAL_PARAM1 = \"actual_value1\"\nADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "DB_PASSWORD",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "DB_PASSWORD = \"actual_password\"\nDB_NAME = \"actual_db_name\"\nADDITIONAL_PARAM1 = \"actual_value1\"\nADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "DB_NAME = \"actual_db_name\"\nADDITIONAL_PARAM1 = \"actual_value1\"\nADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "ADDITIONAL_PARAM1",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "ADDITIONAL_PARAM1 = \"actual_value1\"\nADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "ADDITIONAL_PARAM2",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "ADDITIONAL_PARAM2 = \"actual_value2\"\nUSERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "USERS_FILE",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "USERS_FILE = 'users.json'\nRECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "RECIPES_FILE",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "RECIPES_FILE = 'recipes.json'\nDEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "instance.config",
        "description": "instance.config",
        "peekOfCode": "DEBUG = True # Set to True if you are debugging",
        "detail": "instance.config",
        "documentation": {}
    },
    {
        "label": "RecipeDataManager",
        "kind": 6,
        "importPath": "myapp.models",
        "description": "myapp.models",
        "peekOfCode": "class RecipeDataManager:\n    \"\"\"\n    A class that manages the loading and saving of recipes.\n    \"\"\"\n    @staticmethod\n    def load_recipes():\n        \"\"\"\n        Load recipes from a file.\n        Returns:\n            If the file exists and is not empty, returns the loaded recipes as a dictionary.",
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "recipe_manager",
        "kind": 5,
        "importPath": "myapp.models",
        "description": "myapp.models",
        "peekOfCode": "recipe_manager = RecipeDataManager()\nrecipes_data = recipe_manager.load_recipes()",
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "recipes_data",
        "kind": 5,
        "importPath": "myapp.models",
        "description": "myapp.models",
        "peekOfCode": "recipes_data = recipe_manager.load_recipes()",
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "UserDataManager",
        "kind": 6,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "class UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return {}\n    @staticmethod\n    def save_users(users):",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(int(user_id))\n@views_bp.route('/')\ndef index():\n    print(\"views.py index() function called\")\n    try:\n        return render_template('index.html')\n    except Exception as e:\n        current_app.logger.exception(e)\n        return render_template('500.html'), 500",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def index():\n    print(\"views.py index() function called\")\n    try:\n        return render_template('index.html')\n    except Exception as e:\n        current_app.logger.exception(e)\n        return render_template('500.html'), 500\n@views_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def register():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        password = request.form['password']\n        users_data = UserDataManager.load_users()\n        existing_user = next((user for user in users_data if user['username'] == username or user['email'] == email), None)\n        if existing_user:\n            flash('Username or email already exists.')\n            return redirect(url_for('register'))",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def login():\n    print(' views.py login() function called')\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        user = User.query.filter_by(username=username).first()\n        print('login post method: Ok. User: ', user) \n        if user and check_password_hash(user.password, password):\n            session['username'] = username\n            session.permanent = True",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def logout():\n    logout_user()\n    flash('Logged out successfully.')\n    return redirect(url_for('index'))\n@views_bp.route('/profile')\n@login_required\ndef profile():\n    print('views.py profile() function called with username: ', session['username'])\n    return render_template('profile.html')\n@views_bp.route('/profile/<username>')",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def profile():\n    print('views.py profile() function called with username: ', session['username'])\n    return render_template('profile.html')\n@views_bp.route('/profile/<username>')\n@login_required\ndef profile_username(username):\n    print('views.py profile_username() function called with username: ', username)\n    flash(f\"Hi {username}!\")\n    return render_template('profile.html', username=username)\n@views_bp.route('/recipe/add', methods=['GET', 'POST'])",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "profile_username",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def profile_username(username):\n    print('views.py profile_username() function called with username: ', username)\n    flash(f\"Hi {username}!\")\n    return render_template('profile.html', username=username)\n@views_bp.route('/recipe/add', methods=['GET', 'POST'])\n@login_required\ndef add_recipe():\n    if request.method == 'POST':\n        recipe_data = {\n            \"title\": request.form['title'],",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "add_recipe",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def add_recipe():\n    if request.method == 'POST':\n        recipe_data = {\n            \"title\": request.form['title'],\n            # ... (rest of the fields)\n        }\n        recipes_data = []  \n        recipes_data.append(recipe_data)\n        models.RecipeDataManager.save_recipes(recipes_data)\n        flash('Recipe created successfully.')",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "recipes",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def recipes():\n    return render_template('recipe.html')\n@views_bp.route('/recipe/<int:recipe_id>')\ndef recipe_detail(recipe_id):\n    recipe = models.RecipeDataManager.query.get_or_404(recipe_id)\n    return render_template('recipe_detail.html', recipe=recipe)\n@views_bp.route('/admin')\ndef admin():\n    return render_template('admin.html')\n@views_bp.route('/author')",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "recipe_detail",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def recipe_detail(recipe_id):\n    recipe = models.RecipeDataManager.query.get_or_404(recipe_id)\n    return render_template('recipe_detail.html', recipe=recipe)\n@views_bp.route('/admin')\ndef admin():\n    return render_template('admin.html')\n@views_bp.route('/author')\ndef author():\n    return render_template('author.html')\n@views_bp.route('/patient')",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def admin():\n    return render_template('admin.html')\n@views_bp.route('/author')\ndef author():\n    return render_template('author.html')\n@views_bp.route('/patient')\ndef patient():\n    return render_template('patient.html')\n@views_bp.route('/about')\ndef about():",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def author():\n    return render_template('author.html')\n@views_bp.route('/patient')\ndef patient():\n    return render_template('patient.html')\n@views_bp.route('/about')\ndef about():\n    return render_template('about.html')\n@views_bp.route('/contact')\ndef contact():",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "patient",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def patient():\n    return render_template('patient.html')\n@views_bp.route('/about')\ndef about():\n    return render_template('about.html')\n@views_bp.route('/contact')\ndef contact():\n    return render_template('contact.html')\n@views_bp.route('/search')\ndef search():",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def about():\n    return render_template('about.html')\n@views_bp.route('/contact')\ndef contact():\n    return render_template('contact.html')\n@views_bp.route('/search')\ndef search():\n    return render_template('search.html')\n@views_bp.route('/search_results')\ndef search_results():",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def contact():\n    return render_template('contact.html')\n@views_bp.route('/search')\ndef search():\n    return render_template('search.html')\n@views_bp.route('/search_results')\ndef search_results():\n    return render_template('search_results.html')\n@views_bp.errorhandler(404)\ndef page_not_found(e):",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def search():\n    return render_template('search.html')\n@views_bp.route('/search_results')\ndef search_results():\n    return render_template('search_results.html')\n@views_bp.errorhandler(404)\ndef page_not_found(e):\n    current_app.logger.error('Page Not Found: %s', e)\n    return render_template('404.html'), 404\n@views_bp.errorhandler(500)",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "search_results",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def search_results():\n    return render_template('search_results.html')\n@views_bp.errorhandler(404)\ndef page_not_found(e):\n    current_app.logger.error('Page Not Found: %s', e)\n    return render_template('404.html'), 404\n@views_bp.errorhandler(500)\ndef internal_server_error(e):\n    current_app.logger.exception('Server Error: %s', e)\n    return render_template('500.html'), 500",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def page_not_found(e):\n    current_app.logger.error('Page Not Found: %s', e)\n    return render_template('404.html'), 404\n@views_bp.errorhandler(500)\ndef internal_server_error(e):\n    current_app.logger.exception('Server Error: %s', e)\n    return render_template('500.html'), 500\n@views_bp.after_request\ndef add_header(response):\n    response.cache_control.max_age = 86400",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "internal_server_error",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def internal_server_error(e):\n    current_app.logger.exception('Server Error: %s', e)\n    return render_template('500.html'), 500\n@views_bp.after_request\ndef add_header(response):\n    response.cache_control.max_age = 86400\n    response.cache_control.public = True\n    response.cache_control.must_revalidate = True\n    response.cache_control.no_store = True\n    return response",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "add_header",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def add_header(response):\n    response.cache_control.max_age = 86400\n    response.cache_control.public = True\n    response.cache_control.must_revalidate = True\n    response.cache_control.no_store = True\n    return response",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "views_bp",
        "kind": 5,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "views_bp = Blueprint('views', __name__, template_folder='templates')\nviews_bp.config = {'permanent_session_lifetime': timedelta(minutes=5)}\nlogin_manager = LoginManager()\nlogin_manager.login_view = 'login'\nlogin_manager.login_message_category = 'info'  # Bootstrap class for flash messages\nclass UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "views_bp.config",
        "kind": 5,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "views_bp.config = {'permanent_session_lifetime': timedelta(minutes=5)}\nlogin_manager = LoginManager()\nlogin_manager.login_view = 'login'\nlogin_manager.login_message_category = 'info'  # Bootstrap class for flash messages\nclass UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:\n                return json.load(f)",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.login_view = 'login'\nlogin_manager.login_message_category = 'info'  # Bootstrap class for flash messages\nclass UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "login_manager.login_view = 'login'\nlogin_manager.login_message_category = 'info'  # Bootstrap class for flash messages\nclass UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return {}",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message_category",
        "kind": 5,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "login_manager.login_message_category = 'info'  # Bootstrap class for flash messages\nclass UserDataManager:\n    @staticmethod\n    def load_users():\n        try:\n            with open(config.USERS_FILE, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return {}\n    @staticmethod",
        "detail": "myapp.views",
        "documentation": {}
    }
]