// MalwareDetectionService.java
import org.tensorflow.Graph;
import org.tensorflow.Session;
import org.tensorflow.Tensor;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class MalwareDetectionService {
    private Graph graph;
    private final EmailAnalyzer emailAnalyzer;

    public MalwareDetectionService(String modelPath) throws IOException {
        // Load TensorFlow model
        byte[] graphDef = Files.readAllBytes(Paths.get(modelPath));
        this.graph = new Graph();
        this.graph.importGraphDef(graphDef);
        
        this.emailAnalyzer = new EmailAnalyzer();
    }

    public float analyzeContent(String content) {
        // Preprocess email content
        float[][] processedData = emailAnalyzer.preprocessText(content);
        
        try (Session session = new Session(graph)) {
            Tensor<Float> inputTensor = Tensor.create(processedData, Float.class);
            Tensor<Float> result = session.runner()
                    .feed("input", inputTensor)
                    .fetch("output")
                    .run().get(0).expect(Float.class);
            return result.floatValue();
        }
    }

    // Email analysis component
    private static class EmailAnalyzer {
        public float[][] preprocessText(String content) {
            // Implement NLP preprocessing (TF-IDF, word embeddings, etc.)
            // Return numerical representation for model
            return new float[1][300]; // Example 300-dim embedding
        }
    }
}
